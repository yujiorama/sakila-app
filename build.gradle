buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'base'
    id 'idea'
    id 'co.uzzu.dotenv.gradle' version '1.1.0'
    id 'org.springframework.boot' version '2.3.4.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.10.RELEASE' apply false
    id 'org.jetbrains.kotlin.jvm' version '1.3.71' apply false
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.71' apply false
}

allprojects {
    group = 'org.bitbucket.yujiorama'
    version = '0.0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    ext {
        testcontainersVersion = '1.14.3'
    }

    repositories {
        mavenCentral()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        implementation('org.jetbrains.kotlin:kotlin-reflect')
        implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
        annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
        runtimeOnly('org.postgresql:postgresql')
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation("com.h2database:h2")
        testImplementation('org.testcontainers:junit-jupiter')
        testImplementation('org.testcontainers:postgresql')
    }

    dependencyManagement {
        imports {
            mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = '11'
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = '11'
        }
    }

    test {
        useJUnitPlatform()
        environment = System.getenv() + [
            'DOCKER_HOST'      : env.fetch('DOCKER_HOST', 'unix:///var/run/docker.sock'),
            'DOCKER_TLS_VERIFY': env.fetch('DOCKER_TLS_VERIFY', ''),
            'DOCKER_CERT_PATH' : env.fetch('DOCKER_CERT_PATH', ''),
        ]
    }
}
