plugins {
    id 'base'
    id 'idea'
    id 'co.uzzu.dotenv.gradle' version '1.1.0'
    id 'org.springframework.boot' version '2.3.4.RELEASE' apply false
    id 'io.spring.dependency-management' version '1.0.10.RELEASE' apply false
    id 'org.jetbrains.kotlin.jvm' version '1.4.10' apply false
    id 'org.jetbrains.kotlin.plugin.spring' version '1.4.10' apply false
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.4.10' apply false
}

//noinspection GroovyAssignabilityCheck
allprojects {
    group = 'org.bitbucket.yujiorama'
    version = '0.0.1-SNAPSHOT'
}

//noinspection GroovyAssignabilityCheck
subprojects {
    apply plugin: 'kotlin'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.spring'
    apply plugin: 'org.jetbrains.kotlin.plugin.jpa'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    ext {
        testcontainersVersion = '1.14.3'
        kotlinfakerVersion = '1.5.0'
        jacksonJsonSchemaVersion = '1.0.39'
        scalaVersion = [
            'major': '2',
            'minor': '12',
            'patch': '3',
        ]
    }

    repositories {
        mavenCentral()
        jcenter()
    }

    sourceSets {
        integrationTest {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output

            java {
                srcDirs('src/it/java')
            }

            kotlin {
                srcDirs('src/it/kotlin')
            }

            //noinspection GroovyAssignabilityCheck
            resources {
                srcDirs('src/it/resources')
            }
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }

        integrationTestImplementation {
            extendsFrom testImplementation
        }

        integrationTestRuntimeOnly {
            extendsFrom testRuntimeOnly
        }
    }

    dependencies {
        implementation('org.jetbrains.kotlin:kotlin-reflect')
        implementation('org.jetbrains.kotlin:kotlin-stdlib-jdk8')
        implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
        annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
        compileOnly('org.projectlombok:lombok')
        annotationProcessor('org.projectlombok:lombok')
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation('com.h2database:h2')
        testImplementation('org.testcontainers:junit-jupiter')
        testImplementation('org.testcontainers:postgresql')
        testImplementation("io.github.serpro69:kotlin-faker:${kotlinfakerVersion}")
    }

    dependencyManagement {
        imports {
            mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
            //noinspection UnnecessaryQualifiedReference
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
        }
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = '11'
        }
    }

    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ['-Xjsr305=strict']
            jvmTarget = '11'
        }
    }

    test {
        useJUnitPlatform()
        systemProperty 'spring.profiles.active', 'test'
        testLogging {
            events 'failed',
                'passed',
                'skipped',
                'standard_error',
                'standard_out'
            exceptionFormat 'full'
            showCauses true
            showExceptions true
            showStackTraces true
        }
    }

    task integrationTest(type: Test) {
        group = 'verification'

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        useJUnitPlatform()
        systemProperty 'spring.profiles.active', 'it'
        environment = System.getenv() + [
            'DOCKER_HOST'      : env.fetch('DOCKER_HOST', 'unix:///var/run/docker.sock'),
            'DOCKER_TLS_VERIFY': env.fetch('DOCKER_TLS_VERIFY', ''),
            'DOCKER_CERT_PATH' : env.fetch('DOCKER_CERT_PATH', ''),
        ]
        testLogging {
            events 'failed',
                'passed',
                'skipped',
                'standard_error',
                'standard_out'
            exceptionFormat 'full'
            showCauses true
            showExceptions true
            showStackTraces true
        }
    }

    check.dependsOn integrationTest
}
